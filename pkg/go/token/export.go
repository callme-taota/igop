// export by github.com/goplus/gossa/cmd/qexp

package token

import (
	q "go/token"

	"go/constant"
	"reflect"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage(&gossa.Package{
		Name: "token",
		Path: "go/token",
		Deps: map[string]string{
			"fmt":          "fmt",
			"sort":         "sort",
			"strconv":      "strconv",
			"sync":         "sync",
			"unicode":      "unicode",
			"unicode/utf8": "utf8",
		},
		Interfaces: map[string]reflect.Type{},
		NamedTypes: map[string]gossa.NamedType{
			"File":     {reflect.TypeOf((*q.File)(nil)).Elem(), "", "AddLine,AddLineColumnInfo,AddLineInfo,Base,Line,LineCount,LineStart,MergeLine,Name,Offset,Pos,Position,PositionFor,SetLines,SetLinesForContent,Size,position,unpack"},
			"FileSet":  {reflect.TypeOf((*q.FileSet)(nil)).Elem(), "", "AddFile,Base,File,Iterate,Position,PositionFor,Read,Write,file"},
			"Pos":      {reflect.TypeOf((*q.Pos)(nil)).Elem(), "IsValid", ""},
			"Position": {reflect.TypeOf((*q.Position)(nil)).Elem(), "String", "IsValid"},
			"Token":    {reflect.TypeOf((*q.Token)(nil)).Elem(), "IsKeyword,IsLiteral,IsOperator,Precedence,String", ""},
		},
		AliasTypes: map[string]reflect.Type{},
		Vars:       map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"IsExported":   reflect.ValueOf(q.IsExported),
			"IsIdentifier": reflect.ValueOf(q.IsIdentifier),
			"IsKeyword":    reflect.ValueOf(q.IsKeyword),
			"Lookup":       reflect.ValueOf(q.Lookup),
			"NewFileSet":   reflect.ValueOf(q.NewFileSet),
		},
		TypedConsts: map[string]gossa.TypedConst{
			"ADD":            {reflect.TypeOf(q.ADD), constant.MakeInt64(12)},
			"ADD_ASSIGN":     {reflect.TypeOf(q.ADD_ASSIGN), constant.MakeInt64(23)},
			"AND":            {reflect.TypeOf(q.AND), constant.MakeInt64(17)},
			"AND_ASSIGN":     {reflect.TypeOf(q.AND_ASSIGN), constant.MakeInt64(28)},
			"AND_NOT":        {reflect.TypeOf(q.AND_NOT), constant.MakeInt64(22)},
			"AND_NOT_ASSIGN": {reflect.TypeOf(q.AND_NOT_ASSIGN), constant.MakeInt64(33)},
			"ARROW":          {reflect.TypeOf(q.ARROW), constant.MakeInt64(36)},
			"ASSIGN":         {reflect.TypeOf(q.ASSIGN), constant.MakeInt64(42)},
			"BREAK":          {reflect.TypeOf(q.BREAK), constant.MakeInt64(61)},
			"CASE":           {reflect.TypeOf(q.CASE), constant.MakeInt64(62)},
			"CHAN":           {reflect.TypeOf(q.CHAN), constant.MakeInt64(63)},
			"CHAR":           {reflect.TypeOf(q.CHAR), constant.MakeInt64(8)},
			"COLON":          {reflect.TypeOf(q.COLON), constant.MakeInt64(58)},
			"COMMA":          {reflect.TypeOf(q.COMMA), constant.MakeInt64(52)},
			"COMMENT":        {reflect.TypeOf(q.COMMENT), constant.MakeInt64(2)},
			"CONST":          {reflect.TypeOf(q.CONST), constant.MakeInt64(64)},
			"CONTINUE":       {reflect.TypeOf(q.CONTINUE), constant.MakeInt64(65)},
			"DEC":            {reflect.TypeOf(q.DEC), constant.MakeInt64(38)},
			"DEFAULT":        {reflect.TypeOf(q.DEFAULT), constant.MakeInt64(66)},
			"DEFER":          {reflect.TypeOf(q.DEFER), constant.MakeInt64(67)},
			"DEFINE":         {reflect.TypeOf(q.DEFINE), constant.MakeInt64(47)},
			"ELLIPSIS":       {reflect.TypeOf(q.ELLIPSIS), constant.MakeInt64(48)},
			"ELSE":           {reflect.TypeOf(q.ELSE), constant.MakeInt64(68)},
			"EOF":            {reflect.TypeOf(q.EOF), constant.MakeInt64(1)},
			"EQL":            {reflect.TypeOf(q.EQL), constant.MakeInt64(39)},
			"FALLTHROUGH":    {reflect.TypeOf(q.FALLTHROUGH), constant.MakeInt64(69)},
			"FLOAT":          {reflect.TypeOf(q.FLOAT), constant.MakeInt64(6)},
			"FOR":            {reflect.TypeOf(q.FOR), constant.MakeInt64(70)},
			"FUNC":           {reflect.TypeOf(q.FUNC), constant.MakeInt64(71)},
			"GEQ":            {reflect.TypeOf(q.GEQ), constant.MakeInt64(46)},
			"GO":             {reflect.TypeOf(q.GO), constant.MakeInt64(72)},
			"GOTO":           {reflect.TypeOf(q.GOTO), constant.MakeInt64(73)},
			"GTR":            {reflect.TypeOf(q.GTR), constant.MakeInt64(41)},
			"IDENT":          {reflect.TypeOf(q.IDENT), constant.MakeInt64(4)},
			"IF":             {reflect.TypeOf(q.IF), constant.MakeInt64(74)},
			"ILLEGAL":        {reflect.TypeOf(q.ILLEGAL), constant.MakeInt64(0)},
			"IMAG":           {reflect.TypeOf(q.IMAG), constant.MakeInt64(7)},
			"IMPORT":         {reflect.TypeOf(q.IMPORT), constant.MakeInt64(75)},
			"INC":            {reflect.TypeOf(q.INC), constant.MakeInt64(37)},
			"INT":            {reflect.TypeOf(q.INT), constant.MakeInt64(5)},
			"INTERFACE":      {reflect.TypeOf(q.INTERFACE), constant.MakeInt64(76)},
			"LAND":           {reflect.TypeOf(q.LAND), constant.MakeInt64(34)},
			"LBRACE":         {reflect.TypeOf(q.LBRACE), constant.MakeInt64(51)},
			"LBRACK":         {reflect.TypeOf(q.LBRACK), constant.MakeInt64(50)},
			"LEQ":            {reflect.TypeOf(q.LEQ), constant.MakeInt64(45)},
			"LOR":            {reflect.TypeOf(q.LOR), constant.MakeInt64(35)},
			"LPAREN":         {reflect.TypeOf(q.LPAREN), constant.MakeInt64(49)},
			"LSS":            {reflect.TypeOf(q.LSS), constant.MakeInt64(40)},
			"MAP":            {reflect.TypeOf(q.MAP), constant.MakeInt64(77)},
			"MUL":            {reflect.TypeOf(q.MUL), constant.MakeInt64(14)},
			"MUL_ASSIGN":     {reflect.TypeOf(q.MUL_ASSIGN), constant.MakeInt64(25)},
			"NEQ":            {reflect.TypeOf(q.NEQ), constant.MakeInt64(44)},
			"NOT":            {reflect.TypeOf(q.NOT), constant.MakeInt64(43)},
			"NoPos":          {reflect.TypeOf(q.NoPos), constant.MakeInt64(0)},
			"OR":             {reflect.TypeOf(q.OR), constant.MakeInt64(18)},
			"OR_ASSIGN":      {reflect.TypeOf(q.OR_ASSIGN), constant.MakeInt64(29)},
			"PACKAGE":        {reflect.TypeOf(q.PACKAGE), constant.MakeInt64(78)},
			"PERIOD":         {reflect.TypeOf(q.PERIOD), constant.MakeInt64(53)},
			"QUO":            {reflect.TypeOf(q.QUO), constant.MakeInt64(15)},
			"QUO_ASSIGN":     {reflect.TypeOf(q.QUO_ASSIGN), constant.MakeInt64(26)},
			"RANGE":          {reflect.TypeOf(q.RANGE), constant.MakeInt64(79)},
			"RBRACE":         {reflect.TypeOf(q.RBRACE), constant.MakeInt64(56)},
			"RBRACK":         {reflect.TypeOf(q.RBRACK), constant.MakeInt64(55)},
			"REM":            {reflect.TypeOf(q.REM), constant.MakeInt64(16)},
			"REM_ASSIGN":     {reflect.TypeOf(q.REM_ASSIGN), constant.MakeInt64(27)},
			"RETURN":         {reflect.TypeOf(q.RETURN), constant.MakeInt64(80)},
			"RPAREN":         {reflect.TypeOf(q.RPAREN), constant.MakeInt64(54)},
			"SELECT":         {reflect.TypeOf(q.SELECT), constant.MakeInt64(81)},
			"SEMICOLON":      {reflect.TypeOf(q.SEMICOLON), constant.MakeInt64(57)},
			"SHL":            {reflect.TypeOf(q.SHL), constant.MakeInt64(20)},
			"SHL_ASSIGN":     {reflect.TypeOf(q.SHL_ASSIGN), constant.MakeInt64(31)},
			"SHR":            {reflect.TypeOf(q.SHR), constant.MakeInt64(21)},
			"SHR_ASSIGN":     {reflect.TypeOf(q.SHR_ASSIGN), constant.MakeInt64(32)},
			"STRING":         {reflect.TypeOf(q.STRING), constant.MakeInt64(9)},
			"STRUCT":         {reflect.TypeOf(q.STRUCT), constant.MakeInt64(82)},
			"SUB":            {reflect.TypeOf(q.SUB), constant.MakeInt64(13)},
			"SUB_ASSIGN":     {reflect.TypeOf(q.SUB_ASSIGN), constant.MakeInt64(24)},
			"SWITCH":         {reflect.TypeOf(q.SWITCH), constant.MakeInt64(83)},
			"TYPE":           {reflect.TypeOf(q.TYPE), constant.MakeInt64(84)},
			"VAR":            {reflect.TypeOf(q.VAR), constant.MakeInt64(85)},
			"XOR":            {reflect.TypeOf(q.XOR), constant.MakeInt64(19)},
			"XOR_ASSIGN":     {reflect.TypeOf(q.XOR_ASSIGN), constant.MakeInt64(30)},
		},
		UntypedConsts: map[string]gossa.UntypedConst{
			"HighestPrec": {"untyped int", constant.MakeInt64(7)},
			"LowestPrec":  {"untyped int", constant.MakeInt64(0)},
			"UnaryPrec":   {"untyped int", constant.MakeInt64(6)},
		},
	})
}
