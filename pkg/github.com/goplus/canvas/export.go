// export by github.com/goplus/igop/cmd/qexp

package canvas

import (
	q "github.com/goplus/canvas"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "canvas",
		Path: "github.com/goplus/canvas",
		Deps: map[string]string{
			"crypto/md5":                        "md5",
			"errors":                            "errors",
			"fmt":                               "fmt",
			"github.com/esimov/stackblur-go":    "stackblur",
			"github.com/golang/freetype/raster": "raster",
			"golang.org/x/image/draw":           "draw",
			"golang.org/x/image/font":           "font",
			"golang.org/x/image/font/gofont/goregular": "goregular",
			"golang.org/x/image/font/sfnt":             "sfnt",
			"golang.org/x/image/math/f64":              "f64",
			"golang.org/x/image/math/fixed":            "fixed",
			"image":                                    "image",
			"image/color":                              "color",
			"image/draw":                               "draw",
			"log":                                      "log",
			"math":                                     "math",
			"os":                                       "os",
			"path/filepath":                            "filepath",
			"sort":                                     "sort",
			"strings":                                  "strings",
			"unicode":                                  "unicode",
		},
		Interfaces: map[string]reflect.Type{
			"Context2D":    reflect.TypeOf((*q.Context2D)(nil)).Elem(),
			"Flattener":    reflect.TypeOf((*q.Flattener)(nil)).Elem(),
			"FontProvider": reflect.TypeOf((*q.FontProvider)(nil)).Elem(),
			"Gradient":     reflect.TypeOf((*q.Gradient)(nil)).Elem(),
			"Liner":        reflect.TypeOf((*q.Liner)(nil)).Elem(),
			"PathBuilder":  reflect.TypeOf((*q.PathBuilder)(nil)).Elem(),
			"Pattern":      reflect.TypeOf((*q.Pattern)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"AlphaOverPainter":    reflect.TypeOf((*q.AlphaOverPainter)(nil)).Elem(),
			"CJKFontProvider":     reflect.TypeOf((*q.CJKFontProvider)(nil)).Elem(),
			"CapperFunc":          reflect.TypeOf((*q.CapperFunc)(nil)).Elem(),
			"CompositeOperation":  reflect.TypeOf((*q.CompositeOperation)(nil)).Elem(),
			"ContextStack":        reflect.TypeOf((*q.ContextStack)(nil)).Elem(),
			"DashVertexConverter": reflect.TypeOf((*q.DashVertexConverter)(nil)).Elem(),
			"DemuxFlattener":      reflect.TypeOf((*q.DemuxFlattener)(nil)).Elem(),
			"FRGBA":               reflect.TypeOf((*q.FRGBA)(nil)).Elem(),
			"FillRule":            reflect.TypeOf((*q.FillRule)(nil)).Elem(),
			"Font":                reflect.TypeOf((*q.Font)(nil)).Elem(),
			"FontFamily":          reflect.TypeOf((*q.FontFamily)(nil)).Elem(),
			"FtLineBuilder":       reflect.TypeOf((*q.FtLineBuilder)(nil)).Elem(),
			"GraphicContext2D":    reflect.TypeOf((*q.GraphicContext2D)(nil)).Elem(),
			"ImageFilter":         reflect.TypeOf((*q.ImageFilter)(nil)).Elem(),
			"JoinerFunc":          reflect.TypeOf((*q.JoinerFunc)(nil)).Elem(),
			"LineCap":             reflect.TypeOf((*q.LineCap)(nil)).Elem(),
			"LineJoin":            reflect.TypeOf((*q.LineJoin)(nil)).Elem(),
			"LineStroker":         reflect.TypeOf((*q.LineStroker)(nil)).Elem(),
			"Matrix":              reflect.TypeOf((*q.Matrix)(nil)).Elem(),
			"Path":                reflect.TypeOf((*q.Path)(nil)).Elem(),
			"PathCmp":             reflect.TypeOf((*q.PathCmp)(nil)).Elem(),
			"Point":               reflect.TypeOf((*q.Point)(nil)).Elem(),
			"RGBAPainter":         reflect.TypeOf((*q.RGBAPainter)(nil)).Elem(),
			"RawFont":             reflect.TypeOf((*q.RawFont)(nil)).Elem(),
			"RepeatOp":            reflect.TypeOf((*q.RepeatOp)(nil)).Elem(),
			"SolidPattern":        reflect.TypeOf((*q.SolidPattern)(nil)).Elem(),
			"StackGraphicContext": reflect.TypeOf((*q.StackGraphicContext)(nil)).Elem(),
			"TableFontProvider":   reflect.TypeOf((*q.TableFontProvider)(nil)).Elem(),
			"TextAlign":           reflect.TypeOf((*q.TextAlign)(nil)).Elem(),
			"TextBaseline":        reflect.TypeOf((*q.TextBaseline)(nil)).Elem(),
			"Transformer":         reflect.TypeOf((*q.Transformer)(nil)).Elem(),
			"Vec":                 reflect.TypeOf((*q.Vec)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars:       map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"CopyToNRGBA":                 reflect.ValueOf(q.CopyToNRGBA),
			"CopyToRGBA":                  reflect.ValueOf(q.CopyToRGBA),
			"DrawImage":                   reflect.ValueOf(q.DrawImage),
			"Flatten":                     reflect.ValueOf(q.Flatten),
			"FontDatabase":                reflect.ValueOf(q.FontDatabase),
			"GeneralEquation":             reflect.ValueOf(q.GeneralEquation),
			"GetIntersectPointofLines":    reflect.ValueOf(q.GetIntersectPointofLines),
			"GetLineArctan":               reflect.ValueOf(q.GetLineArctan),
			"HexColor":                    reflect.ValueOf(q.HexColor),
			"IsLatin1":                    reflect.ValueOf(q.IsLatin1),
			"Lerp":                        reflect.ValueOf(q.Lerp),
			"NewAlphaOverPainter":         reflect.ValueOf(q.NewAlphaOverPainter),
			"NewContext2D":                reflect.ValueOf(q.NewContext2D),
			"NewContext2DForImage":        reflect.ValueOf(q.NewContext2DForImage),
			"NewDashConverter":            reflect.ValueOf(q.NewDashConverter),
			"NewFont":                     reflect.ValueOf(q.NewFont),
			"NewFontFamily":               reflect.ValueOf(q.NewFontFamily),
			"NewGraphicContext2D":         reflect.ValueOf(q.NewGraphicContext2D),
			"NewGraphicContext2DForImage": reflect.ValueOf(q.NewGraphicContext2DForImage),
			"NewIdentityMatrix":           reflect.ValueOf(q.NewIdentityMatrix),
			"NewMatrixFromRects":          reflect.ValueOf(q.NewMatrixFromRects),
			"NewPath":                     reflect.ValueOf(q.NewPath),
			"NewRGBAPainter":              reflect.ValueOf(q.NewRGBAPainter),
			"NewRawFont":                  reflect.ValueOf(q.NewRawFont),
			"NewRotationMatrix":           reflect.ValueOf(q.NewRotationMatrix),
			"NewScaleMatrix":              reflect.ValueOf(q.NewScaleMatrix),
			"NewSolidPattern":             reflect.ValueOf(q.NewSolidPattern),
			"NewStackGraphicContext":      reflect.ValueOf(q.NewStackGraphicContext),
			"NewTableFontProvider":        reflect.ValueOf(q.NewTableFontProvider),
			"NewTranslationMatrix":        reflect.ValueOf(q.NewTranslationMatrix),
			"ParserLineCap":               reflect.ValueOf(q.ParserLineCap),
			"ParserLineJoin":              reflect.ValueOf(q.ParserLineJoin),
			"ParserTextAlign":             reflect.ValueOf(q.ParserTextAlign),
			"ParserTextBaseline":          reflect.ValueOf(q.ParserTextBaseline),
			"PreloadFont":                 reflect.ValueOf(q.PreloadFont),
			"SetDefaultFont":              reflect.ValueOf(q.SetDefaultFont),
			"SetFontPaths":                reflect.ValueOf(q.SetFontPaths),
			"SubdivideCubic":              reflect.ValueOf(q.SubdivideCubic),
			"SubdivideQuad":               reflect.ValueOf(q.SubdivideQuad),
			"ToFRGBA":                     reflect.ValueOf(q.ToFRGBA),
			"TraceArc":                    reflect.ValueOf(q.TraceArc),
			"TraceArcEx":                  reflect.ValueOf(q.TraceArcEx),
			"TraceCubic":                  reflect.ValueOf(q.TraceCubic),
			"TraceQuad":                   reflect.ValueOf(q.TraceQuad),
			"VectorAngle":                 reflect.ValueOf(q.VectorAngle),
		},
		TypedConsts: map[string]igop.TypedConst{
			"AlignAlphabetic":  {reflect.TypeOf(q.AlignAlphabetic), constant.MakeInt64(int64(q.AlignAlphabetic))},
			"AlignBottom":      {reflect.TypeOf(q.AlignBottom), constant.MakeInt64(int64(q.AlignBottom))},
			"AlignCenter":      {reflect.TypeOf(q.AlignCenter), constant.MakeInt64(int64(q.AlignCenter))},
			"AlignHanging":     {reflect.TypeOf(q.AlignHanging), constant.MakeInt64(int64(q.AlignHanging))},
			"AlignIdeographic": {reflect.TypeOf(q.AlignIdeographic), constant.MakeInt64(int64(q.AlignIdeographic))},
			"AlignLeft":        {reflect.TypeOf(q.AlignLeft), constant.MakeInt64(int64(q.AlignLeft))},
			"AlignMiddle":      {reflect.TypeOf(q.AlignMiddle), constant.MakeInt64(int64(q.AlignMiddle))},
			"AlignRight":       {reflect.TypeOf(q.AlignRight), constant.MakeInt64(int64(q.AlignRight))},
			"AlignTop":         {reflect.TypeOf(q.AlignTop), constant.MakeInt64(int64(q.AlignTop))},
			"ArcAngleCmp":      {reflect.TypeOf(q.ArcAngleCmp), constant.MakeInt64(int64(q.ArcAngleCmp))},
			"BicubicFilter":    {reflect.TypeOf(q.BicubicFilter), constant.MakeInt64(int64(q.BicubicFilter))},
			"BilinearFilter":   {reflect.TypeOf(q.BilinearFilter), constant.MakeInt64(int64(q.BilinearFilter))},
			"CloseCmp":         {reflect.TypeOf(q.CloseCmp), constant.MakeInt64(int64(q.CloseCmp))},
			"Copy":             {reflect.TypeOf(q.Copy), constant.MakeInt64(int64(q.Copy))},
			"CubicCurveToCmp":  {reflect.TypeOf(q.CubicCurveToCmp), constant.MakeInt64(int64(q.CubicCurveToCmp))},
			"DestinationAtop":  {reflect.TypeOf(q.DestinationAtop), constant.MakeInt64(int64(q.DestinationAtop))},
			"DestinationIn":    {reflect.TypeOf(q.DestinationIn), constant.MakeInt64(int64(q.DestinationIn))},
			"DestinationOut":   {reflect.TypeOf(q.DestinationOut), constant.MakeInt64(int64(q.DestinationOut))},
			"DestinationOver":  {reflect.TypeOf(q.DestinationOver), constant.MakeInt64(int64(q.DestinationOver))},
			"FillRuleEvenOdd":  {reflect.TypeOf(q.FillRuleEvenOdd), constant.MakeInt64(int64(q.FillRuleEvenOdd))},
			"FillRuleWinding":  {reflect.TypeOf(q.FillRuleWinding), constant.MakeInt64(int64(q.FillRuleWinding))},
			"Lighter":          {reflect.TypeOf(q.Lighter), constant.MakeInt64(int64(q.Lighter))},
			"LineCapButt":      {reflect.TypeOf(q.LineCapButt), constant.MakeInt64(int64(q.LineCapButt))},
			"LineCapRound":     {reflect.TypeOf(q.LineCapRound), constant.MakeInt64(int64(q.LineCapRound))},
			"LineCapSquare":    {reflect.TypeOf(q.LineCapSquare), constant.MakeInt64(int64(q.LineCapSquare))},
			"LineJoinBevel":    {reflect.TypeOf(q.LineJoinBevel), constant.MakeInt64(int64(q.LineJoinBevel))},
			"LineJoinMiter":    {reflect.TypeOf(q.LineJoinMiter), constant.MakeInt64(int64(q.LineJoinMiter))},
			"LineJoinRound":    {reflect.TypeOf(q.LineJoinRound), constant.MakeInt64(int64(q.LineJoinRound))},
			"LineToCmp":        {reflect.TypeOf(q.LineToCmp), constant.MakeInt64(int64(q.LineToCmp))},
			"LinearFilter":     {reflect.TypeOf(q.LinearFilter), constant.MakeInt64(int64(q.LinearFilter))},
			"MoveToCmp":        {reflect.TypeOf(q.MoveToCmp), constant.MakeInt64(int64(q.MoveToCmp))},
			"QuadCurveToCmp":   {reflect.TypeOf(q.QuadCurveToCmp), constant.MakeInt64(int64(q.QuadCurveToCmp))},
			"Repeat":           {reflect.TypeOf(q.Repeat), constant.MakeInt64(int64(q.Repeat))},
			"RepeatNone":       {reflect.TypeOf(q.RepeatNone), constant.MakeInt64(int64(q.RepeatNone))},
			"RepeatX":          {reflect.TypeOf(q.RepeatX), constant.MakeInt64(int64(q.RepeatX))},
			"RepeatY":          {reflect.TypeOf(q.RepeatY), constant.MakeInt64(int64(q.RepeatY))},
			"SourceAtop":       {reflect.TypeOf(q.SourceAtop), constant.MakeInt64(int64(q.SourceAtop))},
			"SourceIn":         {reflect.TypeOf(q.SourceIn), constant.MakeInt64(int64(q.SourceIn))},
			"SourceOut":        {reflect.TypeOf(q.SourceOut), constant.MakeInt64(int64(q.SourceOut))},
			"SourceOver":       {reflect.TypeOf(q.SourceOver), constant.MakeInt64(int64(q.SourceOver))},
			"Xor":              {reflect.TypeOf(q.Xor), constant.MakeInt64(int64(q.Xor))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"CurveRecursionLimit": {"untyped int", constant.MakeInt64(int64(q.CurveRecursionLimit))},
		},
	})
}
