// export by github.com/goplus/gossa/cmd/qexp

package syntax

import (
	q "regexp/syntax"

	"go/constant"
	"reflect"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage(&gossa.Package{
		Name: "syntax",
		Path: "regexp/syntax",
		Deps: map[string]string{
			"sort":         "sort",
			"strconv":      "strconv",
			"strings":      "strings",
			"unicode":      "unicode",
			"unicode/utf8": "utf8",
		},
		Interfaces: map[string]reflect.Type{},
		NamedTypes: map[string]gossa.NamedType{
			"EmptyOp":   {reflect.TypeOf((*q.EmptyOp)(nil)).Elem(), "", ""},
			"Error":     {reflect.TypeOf((*q.Error)(nil)).Elem(), "", "Error"},
			"ErrorCode": {reflect.TypeOf((*q.ErrorCode)(nil)).Elem(), "String", ""},
			"Flags":     {reflect.TypeOf((*q.Flags)(nil)).Elem(), "", ""},
			"Inst":      {reflect.TypeOf((*q.Inst)(nil)).Elem(), "", "MatchEmptyWidth,MatchRune,MatchRunePos,String,op"},
			"InstOp":    {reflect.TypeOf((*q.InstOp)(nil)).Elem(), "String", ""},
			"Op":        {reflect.TypeOf((*q.Op)(nil)).Elem(), "String", ""},
			"Prog":      {reflect.TypeOf((*q.Prog)(nil)).Elem(), "", "Prefix,StartCond,String,skipNop"},
			"Regexp":    {reflect.TypeOf((*q.Regexp)(nil)).Elem(), "", "CapNames,Equal,MaxCap,Simplify,String,capNames"},
		},
		AliasTypes: map[string]reflect.Type{},
		Vars:       map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"Compile":        reflect.ValueOf(q.Compile),
			"EmptyOpContext": reflect.ValueOf(q.EmptyOpContext),
			"IsWordChar":     reflect.ValueOf(q.IsWordChar),
			"Parse":          reflect.ValueOf(q.Parse),
		},
		TypedConsts: map[string]gossa.TypedConst{
			"ClassNL":                  {reflect.TypeOf(q.ClassNL), constant.MakeInt64(4)},
			"DotNL":                    {reflect.TypeOf(q.DotNL), constant.MakeInt64(8)},
			"EmptyBeginLine":           {reflect.TypeOf(q.EmptyBeginLine), constant.MakeInt64(1)},
			"EmptyBeginText":           {reflect.TypeOf(q.EmptyBeginText), constant.MakeInt64(4)},
			"EmptyEndLine":             {reflect.TypeOf(q.EmptyEndLine), constant.MakeInt64(2)},
			"EmptyEndText":             {reflect.TypeOf(q.EmptyEndText), constant.MakeInt64(8)},
			"EmptyNoWordBoundary":      {reflect.TypeOf(q.EmptyNoWordBoundary), constant.MakeInt64(32)},
			"EmptyWordBoundary":        {reflect.TypeOf(q.EmptyWordBoundary), constant.MakeInt64(16)},
			"ErrInternalError":         {reflect.TypeOf(q.ErrInternalError), constant.MakeString("regexp/syntax: internal error")},
			"ErrInvalidCharClass":      {reflect.TypeOf(q.ErrInvalidCharClass), constant.MakeString("invalid character class")},
			"ErrInvalidCharRange":      {reflect.TypeOf(q.ErrInvalidCharRange), constant.MakeString("invalid character class range")},
			"ErrInvalidEscape":         {reflect.TypeOf(q.ErrInvalidEscape), constant.MakeString("invalid escape sequence")},
			"ErrInvalidNamedCapture":   {reflect.TypeOf(q.ErrInvalidNamedCapture), constant.MakeString("invalid named capture")},
			"ErrInvalidPerlOp":         {reflect.TypeOf(q.ErrInvalidPerlOp), constant.MakeString("invalid or unsupported Perl syntax")},
			"ErrInvalidRepeatOp":       {reflect.TypeOf(q.ErrInvalidRepeatOp), constant.MakeString("invalid nested repetition operator")},
			"ErrInvalidRepeatSize":     {reflect.TypeOf(q.ErrInvalidRepeatSize), constant.MakeString("invalid repeat count")},
			"ErrInvalidUTF8":           {reflect.TypeOf(q.ErrInvalidUTF8), constant.MakeString("invalid UTF-8")},
			"ErrMissingBracket":        {reflect.TypeOf(q.ErrMissingBracket), constant.MakeString("missing closing ]")},
			"ErrMissingParen":          {reflect.TypeOf(q.ErrMissingParen), constant.MakeString("missing closing )")},
			"ErrMissingRepeatArgument": {reflect.TypeOf(q.ErrMissingRepeatArgument), constant.MakeString("missing argument to repetition operator")},
			"ErrTrailingBackslash":     {reflect.TypeOf(q.ErrTrailingBackslash), constant.MakeString("trailing backslash at end of expression")},
			"ErrUnexpectedParen":       {reflect.TypeOf(q.ErrUnexpectedParen), constant.MakeString("unexpected )")},
			"FoldCase":                 {reflect.TypeOf(q.FoldCase), constant.MakeInt64(1)},
			"InstAlt":                  {reflect.TypeOf(q.InstAlt), constant.MakeInt64(0)},
			"InstAltMatch":             {reflect.TypeOf(q.InstAltMatch), constant.MakeInt64(1)},
			"InstCapture":              {reflect.TypeOf(q.InstCapture), constant.MakeInt64(2)},
			"InstEmptyWidth":           {reflect.TypeOf(q.InstEmptyWidth), constant.MakeInt64(3)},
			"InstFail":                 {reflect.TypeOf(q.InstFail), constant.MakeInt64(5)},
			"InstMatch":                {reflect.TypeOf(q.InstMatch), constant.MakeInt64(4)},
			"InstNop":                  {reflect.TypeOf(q.InstNop), constant.MakeInt64(6)},
			"InstRune":                 {reflect.TypeOf(q.InstRune), constant.MakeInt64(7)},
			"InstRune1":                {reflect.TypeOf(q.InstRune1), constant.MakeInt64(8)},
			"InstRuneAny":              {reflect.TypeOf(q.InstRuneAny), constant.MakeInt64(9)},
			"InstRuneAnyNotNL":         {reflect.TypeOf(q.InstRuneAnyNotNL), constant.MakeInt64(10)},
			"Literal":                  {reflect.TypeOf(q.Literal), constant.MakeInt64(2)},
			"MatchNL":                  {reflect.TypeOf(q.MatchNL), constant.MakeInt64(12)},
			"NonGreedy":                {reflect.TypeOf(q.NonGreedy), constant.MakeInt64(32)},
			"OneLine":                  {reflect.TypeOf(q.OneLine), constant.MakeInt64(16)},
			"OpAlternate":              {reflect.TypeOf(q.OpAlternate), constant.MakeInt64(19)},
			"OpAnyChar":                {reflect.TypeOf(q.OpAnyChar), constant.MakeInt64(6)},
			"OpAnyCharNotNL":           {reflect.TypeOf(q.OpAnyCharNotNL), constant.MakeInt64(5)},
			"OpBeginLine":              {reflect.TypeOf(q.OpBeginLine), constant.MakeInt64(7)},
			"OpBeginText":              {reflect.TypeOf(q.OpBeginText), constant.MakeInt64(9)},
			"OpCapture":                {reflect.TypeOf(q.OpCapture), constant.MakeInt64(13)},
			"OpCharClass":              {reflect.TypeOf(q.OpCharClass), constant.MakeInt64(4)},
			"OpConcat":                 {reflect.TypeOf(q.OpConcat), constant.MakeInt64(18)},
			"OpEmptyMatch":             {reflect.TypeOf(q.OpEmptyMatch), constant.MakeInt64(2)},
			"OpEndLine":                {reflect.TypeOf(q.OpEndLine), constant.MakeInt64(8)},
			"OpEndText":                {reflect.TypeOf(q.OpEndText), constant.MakeInt64(10)},
			"OpLiteral":                {reflect.TypeOf(q.OpLiteral), constant.MakeInt64(3)},
			"OpNoMatch":                {reflect.TypeOf(q.OpNoMatch), constant.MakeInt64(1)},
			"OpNoWordBoundary":         {reflect.TypeOf(q.OpNoWordBoundary), constant.MakeInt64(12)},
			"OpPlus":                   {reflect.TypeOf(q.OpPlus), constant.MakeInt64(15)},
			"OpQuest":                  {reflect.TypeOf(q.OpQuest), constant.MakeInt64(16)},
			"OpRepeat":                 {reflect.TypeOf(q.OpRepeat), constant.MakeInt64(17)},
			"OpStar":                   {reflect.TypeOf(q.OpStar), constant.MakeInt64(14)},
			"OpWordBoundary":           {reflect.TypeOf(q.OpWordBoundary), constant.MakeInt64(11)},
			"POSIX":                    {reflect.TypeOf(q.POSIX), constant.MakeInt64(0)},
			"Perl":                     {reflect.TypeOf(q.Perl), constant.MakeInt64(212)},
			"PerlX":                    {reflect.TypeOf(q.PerlX), constant.MakeInt64(64)},
			"Simple":                   {reflect.TypeOf(q.Simple), constant.MakeInt64(512)},
			"UnicodeGroups":            {reflect.TypeOf(q.UnicodeGroups), constant.MakeInt64(128)},
			"WasDollar":                {reflect.TypeOf(q.WasDollar), constant.MakeInt64(256)},
		},
		UntypedConsts: map[string]gossa.UntypedConst{},
	})
}
