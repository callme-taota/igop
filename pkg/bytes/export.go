// export by github.com/goplus/gossa/cmd/qexp

package bytes

import (
	"bytes"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage("bytes", extMap, typList)
}

var extMap = map[string]interface{}{
	"(*bytes.Buffer).Bytes":       (*bytes.Buffer).Bytes,
	"(*bytes.Buffer).Cap":         (*bytes.Buffer).Cap,
	"(*bytes.Buffer).Grow":        (*bytes.Buffer).Grow,
	"(*bytes.Buffer).Len":         (*bytes.Buffer).Len,
	"(*bytes.Buffer).Next":        (*bytes.Buffer).Next,
	"(*bytes.Buffer).Read":        (*bytes.Buffer).Read,
	"(*bytes.Buffer).ReadByte":    (*bytes.Buffer).ReadByte,
	"(*bytes.Buffer).ReadBytes":   (*bytes.Buffer).ReadBytes,
	"(*bytes.Buffer).ReadFrom":    (*bytes.Buffer).ReadFrom,
	"(*bytes.Buffer).ReadRune":    (*bytes.Buffer).ReadRune,
	"(*bytes.Buffer).ReadString":  (*bytes.Buffer).ReadString,
	"(*bytes.Buffer).Reset":       (*bytes.Buffer).Reset,
	"(*bytes.Buffer).String":      (*bytes.Buffer).String,
	"(*bytes.Buffer).Truncate":    (*bytes.Buffer).Truncate,
	"(*bytes.Buffer).UnreadByte":  (*bytes.Buffer).UnreadByte,
	"(*bytes.Buffer).UnreadRune":  (*bytes.Buffer).UnreadRune,
	"(*bytes.Buffer).Write":       (*bytes.Buffer).Write,
	"(*bytes.Buffer).WriteByte":   (*bytes.Buffer).WriteByte,
	"(*bytes.Buffer).WriteRune":   (*bytes.Buffer).WriteRune,
	"(*bytes.Buffer).WriteString": (*bytes.Buffer).WriteString,
	"(*bytes.Buffer).WriteTo":     (*bytes.Buffer).WriteTo,
	"(*bytes.Reader).Len":         (*bytes.Reader).Len,
	"(*bytes.Reader).Read":        (*bytes.Reader).Read,
	"(*bytes.Reader).ReadAt":      (*bytes.Reader).ReadAt,
	"(*bytes.Reader).ReadByte":    (*bytes.Reader).ReadByte,
	"(*bytes.Reader).ReadRune":    (*bytes.Reader).ReadRune,
	"(*bytes.Reader).Reset":       (*bytes.Reader).Reset,
	"(*bytes.Reader).Seek":        (*bytes.Reader).Seek,
	"(*bytes.Reader).Size":        (*bytes.Reader).Size,
	"(*bytes.Reader).UnreadByte":  (*bytes.Reader).UnreadByte,
	"(*bytes.Reader).UnreadRune":  (*bytes.Reader).UnreadRune,
	"(*bytes.Reader).WriteTo":     (*bytes.Reader).WriteTo,
	"bytes.Compare":               bytes.Compare,
	"bytes.Contains":              bytes.Contains,
	"bytes.ContainsAny":           bytes.ContainsAny,
	"bytes.ContainsRune":          bytes.ContainsRune,
	"bytes.Count":                 bytes.Count,
	"bytes.Equal":                 bytes.Equal,
	"bytes.EqualFold":             bytes.EqualFold,
	"bytes.ErrTooLarge":           &bytes.ErrTooLarge,
	"bytes.Fields":                bytes.Fields,
	"bytes.FieldsFunc":            bytes.FieldsFunc,
	"bytes.HasPrefix":             bytes.HasPrefix,
	"bytes.HasSuffix":             bytes.HasSuffix,
	"bytes.Index":                 bytes.Index,
	"bytes.IndexAny":              bytes.IndexAny,
	"bytes.IndexByte":             bytes.IndexByte,
	"bytes.IndexFunc":             bytes.IndexFunc,
	"bytes.IndexRune":             bytes.IndexRune,
	"bytes.Join":                  bytes.Join,
	"bytes.LastIndex":             bytes.LastIndex,
	"bytes.LastIndexAny":          bytes.LastIndexAny,
	"bytes.LastIndexByte":         bytes.LastIndexByte,
	"bytes.LastIndexFunc":         bytes.LastIndexFunc,
	"bytes.Map":                   bytes.Map,
	"bytes.NewBuffer":             bytes.NewBuffer,
	"bytes.NewBufferString":       bytes.NewBufferString,
	"bytes.NewReader":             bytes.NewReader,
	"bytes.Repeat":                bytes.Repeat,
	"bytes.Replace":               bytes.Replace,
	"bytes.ReplaceAll":            bytes.ReplaceAll,
	"bytes.Runes":                 bytes.Runes,
	"bytes.Split":                 bytes.Split,
	"bytes.SplitAfter":            bytes.SplitAfter,
	"bytes.SplitAfterN":           bytes.SplitAfterN,
	"bytes.SplitN":                bytes.SplitN,
	"bytes.Title":                 bytes.Title,
	"bytes.ToLower":               bytes.ToLower,
	"bytes.ToLowerSpecial":        bytes.ToLowerSpecial,
	"bytes.ToTitle":               bytes.ToTitle,
	"bytes.ToTitleSpecial":        bytes.ToTitleSpecial,
	"bytes.ToUpper":               bytes.ToUpper,
	"bytes.ToUpperSpecial":        bytes.ToUpperSpecial,
	"bytes.ToValidUTF8":           bytes.ToValidUTF8,
	"bytes.Trim":                  bytes.Trim,
	"bytes.TrimFunc":              bytes.TrimFunc,
	"bytes.TrimLeft":              bytes.TrimLeft,
	"bytes.TrimLeftFunc":          bytes.TrimLeftFunc,
	"bytes.TrimPrefix":            bytes.TrimPrefix,
	"bytes.TrimRight":             bytes.TrimRight,
	"bytes.TrimRightFunc":         bytes.TrimRightFunc,
	"bytes.TrimSpace":             bytes.TrimSpace,
	"bytes.TrimSuffix":            bytes.TrimSuffix,
}

var typList = []interface{}{
	(*bytes.Buffer)(nil),
	(*bytes.Reader)(nil),
}
