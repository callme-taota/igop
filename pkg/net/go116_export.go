// export by github.com/goplus/igop/cmd/qexp

//+build go1.16,!go1.17

package net

import (
	q "net"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "net",
		Path: "net",
		Deps: map[string]string{
			"context":                                "context",
			"errors":                                 "errors",
			"internal/bytealg":                       "bytealg",
			"internal/nettrace":                      "nettrace",
			"internal/poll":                          "poll",
			"internal/singleflight":                  "singleflight",
			"io":                                     "io",
			"os":                                     "os",
			"runtime":                                "runtime",
			"runtime/cgo":                            "cgo",
			"sort":                                   "sort",
			"sync":                                   "sync",
			"sync/atomic":                            "atomic",
			"syscall":                                "syscall",
			"time":                                   "time",
			"unsafe":                                 "unsafe",
			"vendor/golang.org/x/net/dns/dnsmessage": "dnsmessage",
			"vendor/golang.org/x/net/route":          "route",
		},
		Interfaces: map[string]reflect.Type{
			"Addr":       reflect.TypeOf((*q.Addr)(nil)).Elem(),
			"Conn":       reflect.TypeOf((*q.Conn)(nil)).Elem(),
			"Error":      reflect.TypeOf((*q.Error)(nil)).Elem(),
			"Listener":   reflect.TypeOf((*q.Listener)(nil)).Elem(),
			"PacketConn": reflect.TypeOf((*q.PacketConn)(nil)).Elem(),
		},
		NamedTypes: map[string]igop.NamedType{
			"AddrError":           {reflect.TypeOf((*q.AddrError)(nil)).Elem(), "", "Error,Temporary,Timeout"},
			"Buffers":             {reflect.TypeOf((*q.Buffers)(nil)).Elem(), "", "Read,WriteTo,consume"},
			"DNSConfigError":      {reflect.TypeOf((*q.DNSConfigError)(nil)).Elem(), "", "Error,Temporary,Timeout,Unwrap"},
			"DNSError":            {reflect.TypeOf((*q.DNSError)(nil)).Elem(), "", "Error,Temporary,Timeout"},
			"Dialer":              {reflect.TypeOf((*q.Dialer)(nil)).Elem(), "", "Dial,DialContext,deadline,dualStack,fallbackDelay,resolver"},
			"Flags":               {reflect.TypeOf((*q.Flags)(nil)).Elem(), "String", ""},
			"HardwareAddr":        {reflect.TypeOf((*q.HardwareAddr)(nil)).Elem(), "String", ""},
			"IP":                  {reflect.TypeOf((*q.IP)(nil)).Elem(), "DefaultMask,Equal,IsGlobalUnicast,IsInterfaceLocalMulticast,IsLinkLocalMulticast,IsLinkLocalUnicast,IsLoopback,IsMulticast,IsUnspecified,MarshalText,Mask,String,To16,To4,matchAddrFamily", "UnmarshalText"},
			"IPAddr":              {reflect.TypeOf((*q.IPAddr)(nil)).Elem(), "", "Network,String,family,isWildcard,opAddr,sockaddr,toLocal"},
			"IPConn":              {reflect.TypeOf((*q.IPConn)(nil)).Elem(), "", "ReadFrom,ReadFromIP,ReadMsgIP,SyscallConn,WriteMsgIP,WriteTo,WriteToIP,readFrom,readMsg,writeMsg,writeTo"},
			"IPMask":              {reflect.TypeOf((*q.IPMask)(nil)).Elem(), "Size,String", ""},
			"IPNet":               {reflect.TypeOf((*q.IPNet)(nil)).Elem(), "", "Contains,Network,String"},
			"Interface":           {reflect.TypeOf((*q.Interface)(nil)).Elem(), "", "Addrs,MulticastAddrs"},
			"InvalidAddrError":    {reflect.TypeOf((*q.InvalidAddrError)(nil)).Elem(), "Error,Temporary,Timeout", ""},
			"ListenConfig":        {reflect.TypeOf((*q.ListenConfig)(nil)).Elem(), "", "Listen,ListenPacket"},
			"MX":                  {reflect.TypeOf((*q.MX)(nil)).Elem(), "", ""},
			"NS":                  {reflect.TypeOf((*q.NS)(nil)).Elem(), "", ""},
			"OpError":             {reflect.TypeOf((*q.OpError)(nil)).Elem(), "", "Error,Temporary,Timeout,Unwrap"},
			"ParseError":          {reflect.TypeOf((*q.ParseError)(nil)).Elem(), "", "Error"},
			"Resolver":            {reflect.TypeOf((*q.Resolver)(nil)).Elem(), "", "LookupAddr,LookupCNAME,LookupHost,LookupIP,LookupIPAddr,LookupMX,LookupNS,LookupPort,LookupSRV,LookupTXT,dial,exchange,getLookupGroup,goLookupCNAME,goLookupHost,goLookupHostOrder,goLookupIP,goLookupIPCNAMEOrder,goLookupPTR,internetAddrList,lookup,lookupAddr,lookupCNAME,lookupHost,lookupIP,lookupIPAddr,lookupMX,lookupNS,lookupPort,lookupSRV,lookupTXT,preferGo,resolveAddrList,strictErrors,tryOneName"},
			"SRV":                 {reflect.TypeOf((*q.SRV)(nil)).Elem(), "", ""},
			"TCPAddr":             {reflect.TypeOf((*q.TCPAddr)(nil)).Elem(), "", "Network,String,family,isWildcard,opAddr,sockaddr,toLocal"},
			"TCPConn":             {reflect.TypeOf((*q.TCPConn)(nil)).Elem(), "", "CloseRead,CloseWrite,ReadFrom,SetKeepAlive,SetKeepAlivePeriod,SetLinger,SetNoDelay,SyscallConn,readFrom"},
			"TCPListener":         {reflect.TypeOf((*q.TCPListener)(nil)).Elem(), "", "Accept,AcceptTCP,Addr,Close,File,SetDeadline,SyscallConn,accept,close,file,ok"},
			"UDPAddr":             {reflect.TypeOf((*q.UDPAddr)(nil)).Elem(), "", "Network,String,family,isWildcard,opAddr,sockaddr,toLocal"},
			"UDPConn":             {reflect.TypeOf((*q.UDPConn)(nil)).Elem(), "", "ReadFrom,ReadFromUDP,ReadMsgUDP,SyscallConn,WriteMsgUDP,WriteTo,WriteToUDP,readFrom,readMsg,writeMsg,writeTo"},
			"UnixAddr":            {reflect.TypeOf((*q.UnixAddr)(nil)).Elem(), "", "Network,String,family,isWildcard,opAddr,sockaddr,toLocal"},
			"UnixConn":            {reflect.TypeOf((*q.UnixConn)(nil)).Elem(), "", "CloseRead,CloseWrite,ReadFrom,ReadFromUnix,ReadMsgUnix,SyscallConn,WriteMsgUnix,WriteTo,WriteToUnix,readFrom,readMsg,writeMsg,writeTo"},
			"UnixListener":        {reflect.TypeOf((*q.UnixListener)(nil)).Elem(), "", "Accept,AcceptUnix,Addr,Close,File,SetDeadline,SetUnlinkOnClose,SyscallConn,accept,close,file,ok"},
			"UnknownNetworkError": {reflect.TypeOf((*q.UnknownNetworkError)(nil)).Elem(), "Error,Temporary,Timeout", ""},
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"DefaultResolver":            reflect.ValueOf(&q.DefaultResolver),
			"ErrClosed":                  reflect.ValueOf(&q.ErrClosed),
			"ErrWriteToConnected":        reflect.ValueOf(&q.ErrWriteToConnected),
			"IPv4allrouter":              reflect.ValueOf(&q.IPv4allrouter),
			"IPv4allsys":                 reflect.ValueOf(&q.IPv4allsys),
			"IPv4bcast":                  reflect.ValueOf(&q.IPv4bcast),
			"IPv4zero":                   reflect.ValueOf(&q.IPv4zero),
			"IPv6interfacelocalallnodes": reflect.ValueOf(&q.IPv6interfacelocalallnodes),
			"IPv6linklocalallnodes":      reflect.ValueOf(&q.IPv6linklocalallnodes),
			"IPv6linklocalallrouters":    reflect.ValueOf(&q.IPv6linklocalallrouters),
			"IPv6loopback":               reflect.ValueOf(&q.IPv6loopback),
			"IPv6unspecified":            reflect.ValueOf(&q.IPv6unspecified),
			"IPv6zero":                   reflect.ValueOf(&q.IPv6zero),
		},
		Funcs: map[string]reflect.Value{
			"CIDRMask":           reflect.ValueOf(q.CIDRMask),
			"Dial":               reflect.ValueOf(q.Dial),
			"DialIP":             reflect.ValueOf(q.DialIP),
			"DialTCP":            reflect.ValueOf(q.DialTCP),
			"DialTimeout":        reflect.ValueOf(q.DialTimeout),
			"DialUDP":            reflect.ValueOf(q.DialUDP),
			"DialUnix":           reflect.ValueOf(q.DialUnix),
			"FileConn":           reflect.ValueOf(q.FileConn),
			"FileListener":       reflect.ValueOf(q.FileListener),
			"FilePacketConn":     reflect.ValueOf(q.FilePacketConn),
			"IPv4":               reflect.ValueOf(q.IPv4),
			"IPv4Mask":           reflect.ValueOf(q.IPv4Mask),
			"InterfaceAddrs":     reflect.ValueOf(q.InterfaceAddrs),
			"InterfaceByIndex":   reflect.ValueOf(q.InterfaceByIndex),
			"InterfaceByName":    reflect.ValueOf(q.InterfaceByName),
			"Interfaces":         reflect.ValueOf(q.Interfaces),
			"JoinHostPort":       reflect.ValueOf(q.JoinHostPort),
			"Listen":             reflect.ValueOf(q.Listen),
			"ListenIP":           reflect.ValueOf(q.ListenIP),
			"ListenMulticastUDP": reflect.ValueOf(q.ListenMulticastUDP),
			"ListenPacket":       reflect.ValueOf(q.ListenPacket),
			"ListenTCP":          reflect.ValueOf(q.ListenTCP),
			"ListenUDP":          reflect.ValueOf(q.ListenUDP),
			"ListenUnix":         reflect.ValueOf(q.ListenUnix),
			"ListenUnixgram":     reflect.ValueOf(q.ListenUnixgram),
			"LookupAddr":         reflect.ValueOf(q.LookupAddr),
			"LookupCNAME":        reflect.ValueOf(q.LookupCNAME),
			"LookupHost":         reflect.ValueOf(q.LookupHost),
			"LookupIP":           reflect.ValueOf(q.LookupIP),
			"LookupMX":           reflect.ValueOf(q.LookupMX),
			"LookupNS":           reflect.ValueOf(q.LookupNS),
			"LookupPort":         reflect.ValueOf(q.LookupPort),
			"LookupSRV":          reflect.ValueOf(q.LookupSRV),
			"LookupTXT":          reflect.ValueOf(q.LookupTXT),
			"ParseCIDR":          reflect.ValueOf(q.ParseCIDR),
			"ParseIP":            reflect.ValueOf(q.ParseIP),
			"ParseMAC":           reflect.ValueOf(q.ParseMAC),
			"Pipe":               reflect.ValueOf(q.Pipe),
			"ResolveIPAddr":      reflect.ValueOf(q.ResolveIPAddr),
			"ResolveTCPAddr":     reflect.ValueOf(q.ResolveTCPAddr),
			"ResolveUDPAddr":     reflect.ValueOf(q.ResolveUDPAddr),
			"ResolveUnixAddr":    reflect.ValueOf(q.ResolveUnixAddr),
			"SplitHostPort":      reflect.ValueOf(q.SplitHostPort),
		},
		TypedConsts: map[string]igop.TypedConst{
			"FlagBroadcast":    {reflect.TypeOf(q.FlagBroadcast), constant.MakeInt64(int64(q.FlagBroadcast))},
			"FlagLoopback":     {reflect.TypeOf(q.FlagLoopback), constant.MakeInt64(int64(q.FlagLoopback))},
			"FlagMulticast":    {reflect.TypeOf(q.FlagMulticast), constant.MakeInt64(int64(q.FlagMulticast))},
			"FlagPointToPoint": {reflect.TypeOf(q.FlagPointToPoint), constant.MakeInt64(int64(q.FlagPointToPoint))},
			"FlagUp":           {reflect.TypeOf(q.FlagUp), constant.MakeInt64(int64(q.FlagUp))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"IPv4len": {"untyped int", constant.MakeInt64(int64(q.IPv4len))},
			"IPv6len": {"untyped int", constant.MakeInt64(int64(q.IPv6len))},
		},
	})
}
