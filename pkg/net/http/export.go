// export by github.com/goplus/gossa/cmd/qexp

package http

import (
	q "net/http"

	"go/constant"
	"reflect"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage(&gossa.Package{
		Name: "http",
		Path: "net/http",
		Deps: map[string]string{
			"bufio":                                  "bufio",
			"bytes":                                  "bytes",
			"compress/gzip":                          "gzip",
			"container/list":                         "list",
			"context":                                "context",
			"crypto/rand":                            "rand",
			"crypto/tls":                             "tls",
			"encoding/base64":                        "base64",
			"encoding/binary":                        "binary",
			"errors":                                 "errors",
			"fmt":                                    "fmt",
			"io":                                     "io",
			"io/fs":                                  "fs",
			"io/ioutil":                              "ioutil",
			"log":                                    "log",
			"math":                                   "math",
			"math/rand":                              "rand",
			"mime":                                   "mime",
			"mime/multipart":                         "multipart",
			"net":                                    "net",
			"net/http/httptrace":                     "httptrace",
			"net/http/internal":                      "internal",
			"net/textproto":                          "textproto",
			"net/url":                                "url",
			"os":                                     "os",
			"path":                                   "path",
			"path/filepath":                          "filepath",
			"reflect":                                "reflect",
			"runtime":                                "runtime",
			"sort":                                   "sort",
			"strconv":                                "strconv",
			"strings":                                "strings",
			"sync":                                   "sync",
			"sync/atomic":                            "atomic",
			"time":                                   "time",
			"unicode/utf8":                           "utf8",
			"vendor/golang.org/x/net/http/httpguts":  "httpguts",
			"vendor/golang.org/x/net/http/httpproxy": "httpproxy",
			"vendor/golang.org/x/net/http2/hpack":    "hpack",
			"vendor/golang.org/x/net/idna":           "idna",
		},
		Interfaces: map[string]reflect.Type{
			"CloseNotifier":  reflect.TypeOf((*q.CloseNotifier)(nil)).Elem(),
			"CookieJar":      reflect.TypeOf((*q.CookieJar)(nil)).Elem(),
			"File":           reflect.TypeOf((*q.File)(nil)).Elem(),
			"FileSystem":     reflect.TypeOf((*q.FileSystem)(nil)).Elem(),
			"Flusher":        reflect.TypeOf((*q.Flusher)(nil)).Elem(),
			"Handler":        reflect.TypeOf((*q.Handler)(nil)).Elem(),
			"Hijacker":       reflect.TypeOf((*q.Hijacker)(nil)).Elem(),
			"Pusher":         reflect.TypeOf((*q.Pusher)(nil)).Elem(),
			"ResponseWriter": reflect.TypeOf((*q.ResponseWriter)(nil)).Elem(),
			"RoundTripper":   reflect.TypeOf((*q.RoundTripper)(nil)).Elem(),
		},
		NamedTypes: map[string]gossa.NamedType{
			"Client":        {reflect.TypeOf((*q.Client)(nil)).Elem(), "", "CloseIdleConnections,Do,Get,Head,Post,PostForm,checkRedirect,deadline,do,makeHeadersCopier,send,transport"},
			"ConnState":     {reflect.TypeOf((*q.ConnState)(nil)).Elem(), "String", ""},
			"Cookie":        {reflect.TypeOf((*q.Cookie)(nil)).Elem(), "", "String"},
			"Dir":           {reflect.TypeOf((*q.Dir)(nil)).Elem(), "Open", ""},
			"HandlerFunc":   {reflect.TypeOf((*q.HandlerFunc)(nil)).Elem(), "ServeHTTP", ""},
			"Header":        {reflect.TypeOf((*q.Header)(nil)).Elem(), "Add,Clone,Del,Get,Set,Values,Write,WriteSubset,get,has,sortedKeyValues,write,writeSubset", ""},
			"ProtocolError": {reflect.TypeOf((*q.ProtocolError)(nil)).Elem(), "", "Error"},
			"PushOptions":   {reflect.TypeOf((*q.PushOptions)(nil)).Elem(), "", ""},
			"Request":       {reflect.TypeOf((*q.Request)(nil)).Elem(), "", "AddCookie,BasicAuth,Clone,Context,Cookie,Cookies,FormFile,FormValue,MultipartReader,ParseForm,ParseMultipartForm,PostFormValue,ProtoAtLeast,Referer,SetBasicAuth,UserAgent,WithContext,Write,WriteProxy,closeBody,expectsContinue,isH2Upgrade,isReplayable,multipartReader,outgoingLength,requiresHTTP1,wantsClose,wantsHttp10KeepAlive,write"},
			"Response":      {reflect.TypeOf((*q.Response)(nil)).Elem(), "", "Cookies,Location,ProtoAtLeast,Write,bodyIsWritable,closeBody,isProtocolSwitch"},
			"SameSite":      {reflect.TypeOf((*q.SameSite)(nil)).Elem(), "", ""},
			"ServeMux":      {reflect.TypeOf((*q.ServeMux)(nil)).Elem(), "", "Handle,HandleFunc,Handler,ServeHTTP,handler,match,redirectToPathSlash,shouldRedirectRLocked"},
			"Server":        {reflect.TypeOf((*q.Server)(nil)).Elem(), "", "Close,ListenAndServe,ListenAndServeTLS,RegisterOnShutdown,Serve,ServeTLS,SetKeepAlivesEnabled,Shutdown,closeDoneChanLocked,closeIdleConns,closeListenersLocked,doKeepAlives,getDoneChan,getDoneChanLocked,idleTimeout,initialReadLimitSize,logf,maxHeaderBytes,newConn,numListeners,onceSetNextProtoDefaults,onceSetNextProtoDefaults_Serve,readHeaderTimeout,setupHTTP2_Serve,setupHTTP2_ServeTLS,shouldConfigureHTTP2ForServe,shuttingDown,trackConn,trackListener"},
			"Transport":     {reflect.TypeOf((*q.Transport)(nil)).Elem(), "", "CancelRequest,Clone,CloseIdleConnections,RegisterProtocol,RoundTrip,alternateRoundTripper,cancelRequest,connectMethodForRequest,customDialTLS,decConnsPerHost,dial,dialConn,dialConnFor,getConn,hasCustomTLSDialer,maxIdleConnsPerHost,onceSetNextProtoDefaults,putOrCloseIdleConn,queueForDial,queueForIdleConn,readBufferSize,removeIdleConn,removeIdleConnLocked,replaceReqCanceler,roundTrip,setReqCanceler,tryPutIdleConn,useRegisteredProtocol,writeBufferSize"},
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"DefaultClient":           reflect.ValueOf(&q.DefaultClient),
			"DefaultServeMux":         reflect.ValueOf(&q.DefaultServeMux),
			"DefaultTransport":        reflect.ValueOf(&q.DefaultTransport),
			"ErrAbortHandler":         reflect.ValueOf(&q.ErrAbortHandler),
			"ErrBodyNotAllowed":       reflect.ValueOf(&q.ErrBodyNotAllowed),
			"ErrBodyReadAfterClose":   reflect.ValueOf(&q.ErrBodyReadAfterClose),
			"ErrContentLength":        reflect.ValueOf(&q.ErrContentLength),
			"ErrHandlerTimeout":       reflect.ValueOf(&q.ErrHandlerTimeout),
			"ErrHeaderTooLong":        reflect.ValueOf(&q.ErrHeaderTooLong),
			"ErrHijacked":             reflect.ValueOf(&q.ErrHijacked),
			"ErrLineTooLong":          reflect.ValueOf(&q.ErrLineTooLong),
			"ErrMissingBoundary":      reflect.ValueOf(&q.ErrMissingBoundary),
			"ErrMissingContentLength": reflect.ValueOf(&q.ErrMissingContentLength),
			"ErrMissingFile":          reflect.ValueOf(&q.ErrMissingFile),
			"ErrNoCookie":             reflect.ValueOf(&q.ErrNoCookie),
			"ErrNoLocation":           reflect.ValueOf(&q.ErrNoLocation),
			"ErrNotMultipart":         reflect.ValueOf(&q.ErrNotMultipart),
			"ErrNotSupported":         reflect.ValueOf(&q.ErrNotSupported),
			"ErrServerClosed":         reflect.ValueOf(&q.ErrServerClosed),
			"ErrShortBody":            reflect.ValueOf(&q.ErrShortBody),
			"ErrSkipAltProtocol":      reflect.ValueOf(&q.ErrSkipAltProtocol),
			"ErrUnexpectedTrailer":    reflect.ValueOf(&q.ErrUnexpectedTrailer),
			"ErrUseLastResponse":      reflect.ValueOf(&q.ErrUseLastResponse),
			"ErrWriteAfterFlush":      reflect.ValueOf(&q.ErrWriteAfterFlush),
			"LocalAddrContextKey":     reflect.ValueOf(&q.LocalAddrContextKey),
			"NoBody":                  reflect.ValueOf(&q.NoBody),
			"ServerContextKey":        reflect.ValueOf(&q.ServerContextKey),
		},
		Funcs: map[string]reflect.Value{
			"CanonicalHeaderKey":    reflect.ValueOf(q.CanonicalHeaderKey),
			"DetectContentType":     reflect.ValueOf(q.DetectContentType),
			"Error":                 reflect.ValueOf(q.Error),
			"FS":                    reflect.ValueOf(q.FS),
			"FileServer":            reflect.ValueOf(q.FileServer),
			"Get":                   reflect.ValueOf(q.Get),
			"Handle":                reflect.ValueOf(q.Handle),
			"HandleFunc":            reflect.ValueOf(q.HandleFunc),
			"Head":                  reflect.ValueOf(q.Head),
			"ListenAndServe":        reflect.ValueOf(q.ListenAndServe),
			"ListenAndServeTLS":     reflect.ValueOf(q.ListenAndServeTLS),
			"MaxBytesReader":        reflect.ValueOf(q.MaxBytesReader),
			"NewFileTransport":      reflect.ValueOf(q.NewFileTransport),
			"NewRequest":            reflect.ValueOf(q.NewRequest),
			"NewRequestWithContext": reflect.ValueOf(q.NewRequestWithContext),
			"NewServeMux":           reflect.ValueOf(q.NewServeMux),
			"NotFound":              reflect.ValueOf(q.NotFound),
			"NotFoundHandler":       reflect.ValueOf(q.NotFoundHandler),
			"ParseHTTPVersion":      reflect.ValueOf(q.ParseHTTPVersion),
			"ParseTime":             reflect.ValueOf(q.ParseTime),
			"Post":                  reflect.ValueOf(q.Post),
			"PostForm":              reflect.ValueOf(q.PostForm),
			"ProxyFromEnvironment":  reflect.ValueOf(q.ProxyFromEnvironment),
			"ProxyURL":              reflect.ValueOf(q.ProxyURL),
			"ReadRequest":           reflect.ValueOf(q.ReadRequest),
			"ReadResponse":          reflect.ValueOf(q.ReadResponse),
			"Redirect":              reflect.ValueOf(q.Redirect),
			"RedirectHandler":       reflect.ValueOf(q.RedirectHandler),
			"Serve":                 reflect.ValueOf(q.Serve),
			"ServeContent":          reflect.ValueOf(q.ServeContent),
			"ServeFile":             reflect.ValueOf(q.ServeFile),
			"ServeTLS":              reflect.ValueOf(q.ServeTLS),
			"SetCookie":             reflect.ValueOf(q.SetCookie),
			"StatusText":            reflect.ValueOf(q.StatusText),
			"StripPrefix":           reflect.ValueOf(q.StripPrefix),
			"TimeoutHandler":        reflect.ValueOf(q.TimeoutHandler),
		},
		TypedConsts: map[string]gossa.TypedConst{
			"SameSiteDefaultMode": {reflect.TypeOf(q.SameSiteDefaultMode), constant.MakeInt64(1)},
			"SameSiteLaxMode":     {reflect.TypeOf(q.SameSiteLaxMode), constant.MakeInt64(2)},
			"SameSiteNoneMode":    {reflect.TypeOf(q.SameSiteNoneMode), constant.MakeInt64(4)},
			"SameSiteStrictMode":  {reflect.TypeOf(q.SameSiteStrictMode), constant.MakeInt64(3)},
			"StateActive":         {reflect.TypeOf(q.StateActive), constant.MakeInt64(1)},
			"StateClosed":         {reflect.TypeOf(q.StateClosed), constant.MakeInt64(4)},
			"StateHijacked":       {reflect.TypeOf(q.StateHijacked), constant.MakeInt64(3)},
			"StateIdle":           {reflect.TypeOf(q.StateIdle), constant.MakeInt64(2)},
			"StateNew":            {reflect.TypeOf(q.StateNew), constant.MakeInt64(0)},
		},
		UntypedConsts: map[string]gossa.UntypedConst{
			"DefaultMaxHeaderBytes":               {"untyped int", constant.MakeInt64(1048576)},
			"DefaultMaxIdleConnsPerHost":          {"untyped int", constant.MakeInt64(2)},
			"MethodConnect":                       {"untyped string", constant.MakeString("CONNECT")},
			"MethodDelete":                        {"untyped string", constant.MakeString("DELETE")},
			"MethodGet":                           {"untyped string", constant.MakeString("GET")},
			"MethodHead":                          {"untyped string", constant.MakeString("HEAD")},
			"MethodOptions":                       {"untyped string", constant.MakeString("OPTIONS")},
			"MethodPatch":                         {"untyped string", constant.MakeString("PATCH")},
			"MethodPost":                          {"untyped string", constant.MakeString("POST")},
			"MethodPut":                           {"untyped string", constant.MakeString("PUT")},
			"MethodTrace":                         {"untyped string", constant.MakeString("TRACE")},
			"StatusAccepted":                      {"untyped int", constant.MakeInt64(202)},
			"StatusAlreadyReported":               {"untyped int", constant.MakeInt64(208)},
			"StatusBadGateway":                    {"untyped int", constant.MakeInt64(502)},
			"StatusBadRequest":                    {"untyped int", constant.MakeInt64(400)},
			"StatusConflict":                      {"untyped int", constant.MakeInt64(409)},
			"StatusContinue":                      {"untyped int", constant.MakeInt64(100)},
			"StatusCreated":                       {"untyped int", constant.MakeInt64(201)},
			"StatusEarlyHints":                    {"untyped int", constant.MakeInt64(103)},
			"StatusExpectationFailed":             {"untyped int", constant.MakeInt64(417)},
			"StatusFailedDependency":              {"untyped int", constant.MakeInt64(424)},
			"StatusForbidden":                     {"untyped int", constant.MakeInt64(403)},
			"StatusFound":                         {"untyped int", constant.MakeInt64(302)},
			"StatusGatewayTimeout":                {"untyped int", constant.MakeInt64(504)},
			"StatusGone":                          {"untyped int", constant.MakeInt64(410)},
			"StatusHTTPVersionNotSupported":       {"untyped int", constant.MakeInt64(505)},
			"StatusIMUsed":                        {"untyped int", constant.MakeInt64(226)},
			"StatusInsufficientStorage":           {"untyped int", constant.MakeInt64(507)},
			"StatusInternalServerError":           {"untyped int", constant.MakeInt64(500)},
			"StatusLengthRequired":                {"untyped int", constant.MakeInt64(411)},
			"StatusLocked":                        {"untyped int", constant.MakeInt64(423)},
			"StatusLoopDetected":                  {"untyped int", constant.MakeInt64(508)},
			"StatusMethodNotAllowed":              {"untyped int", constant.MakeInt64(405)},
			"StatusMisdirectedRequest":            {"untyped int", constant.MakeInt64(421)},
			"StatusMovedPermanently":              {"untyped int", constant.MakeInt64(301)},
			"StatusMultiStatus":                   {"untyped int", constant.MakeInt64(207)},
			"StatusMultipleChoices":               {"untyped int", constant.MakeInt64(300)},
			"StatusNetworkAuthenticationRequired": {"untyped int", constant.MakeInt64(511)},
			"StatusNoContent":                     {"untyped int", constant.MakeInt64(204)},
			"StatusNonAuthoritativeInfo":          {"untyped int", constant.MakeInt64(203)},
			"StatusNotAcceptable":                 {"untyped int", constant.MakeInt64(406)},
			"StatusNotExtended":                   {"untyped int", constant.MakeInt64(510)},
			"StatusNotFound":                      {"untyped int", constant.MakeInt64(404)},
			"StatusNotImplemented":                {"untyped int", constant.MakeInt64(501)},
			"StatusNotModified":                   {"untyped int", constant.MakeInt64(304)},
			"StatusOK":                            {"untyped int", constant.MakeInt64(200)},
			"StatusPartialContent":                {"untyped int", constant.MakeInt64(206)},
			"StatusPaymentRequired":               {"untyped int", constant.MakeInt64(402)},
			"StatusPermanentRedirect":             {"untyped int", constant.MakeInt64(308)},
			"StatusPreconditionFailed":            {"untyped int", constant.MakeInt64(412)},
			"StatusPreconditionRequired":          {"untyped int", constant.MakeInt64(428)},
			"StatusProcessing":                    {"untyped int", constant.MakeInt64(102)},
			"StatusProxyAuthRequired":             {"untyped int", constant.MakeInt64(407)},
			"StatusRequestEntityTooLarge":         {"untyped int", constant.MakeInt64(413)},
			"StatusRequestHeaderFieldsTooLarge":   {"untyped int", constant.MakeInt64(431)},
			"StatusRequestTimeout":                {"untyped int", constant.MakeInt64(408)},
			"StatusRequestURITooLong":             {"untyped int", constant.MakeInt64(414)},
			"StatusRequestedRangeNotSatisfiable":  {"untyped int", constant.MakeInt64(416)},
			"StatusResetContent":                  {"untyped int", constant.MakeInt64(205)},
			"StatusSeeOther":                      {"untyped int", constant.MakeInt64(303)},
			"StatusServiceUnavailable":            {"untyped int", constant.MakeInt64(503)},
			"StatusSwitchingProtocols":            {"untyped int", constant.MakeInt64(101)},
			"StatusTeapot":                        {"untyped int", constant.MakeInt64(418)},
			"StatusTemporaryRedirect":             {"untyped int", constant.MakeInt64(307)},
			"StatusTooEarly":                      {"untyped int", constant.MakeInt64(425)},
			"StatusTooManyRequests":               {"untyped int", constant.MakeInt64(429)},
			"StatusUnauthorized":                  {"untyped int", constant.MakeInt64(401)},
			"StatusUnavailableForLegalReasons":    {"untyped int", constant.MakeInt64(451)},
			"StatusUnprocessableEntity":           {"untyped int", constant.MakeInt64(422)},
			"StatusUnsupportedMediaType":          {"untyped int", constant.MakeInt64(415)},
			"StatusUpgradeRequired":               {"untyped int", constant.MakeInt64(426)},
			"StatusUseProxy":                      {"untyped int", constant.MakeInt64(305)},
			"StatusVariantAlsoNegotiates":         {"untyped int", constant.MakeInt64(506)},
			"TimeFormat":                          {"untyped string", constant.MakeString("Mon, 02 Jan 2006 15:04:05 GMT")},
			"TrailerPrefix":                       {"untyped string", constant.MakeString("Trailer:")},
		},
	})
}
