// export by github.com/goplus/interp/cmd/qexp

package reflect

import (
	"reflect"

	"github.com/goplus/interp"
)

func init() {
	interp.RegisterPackage("reflect", extMap, typList)
}

var extMap = map[string]interface{}{
	"(*reflect.MapIter).Key":          (*reflect.MapIter).Key,
	"(*reflect.MapIter).Next":         (*reflect.MapIter).Next,
	"(*reflect.MapIter).Value":        (*reflect.MapIter).Value,
	"(*reflect.ValueError).Error":     (*reflect.ValueError).Error,
	"(reflect.ChanDir).String":        (reflect.ChanDir).String,
	"(reflect.Kind).String":           (reflect.Kind).String,
	"(reflect.StructTag).Get":         (reflect.StructTag).Get,
	"(reflect.StructTag).Lookup":      (reflect.StructTag).Lookup,
	"(reflect.Type).Align":            (reflect.Type).Align,
	"(reflect.Type).AssignableTo":     (reflect.Type).AssignableTo,
	"(reflect.Type).Bits":             (reflect.Type).Bits,
	"(reflect.Type).ChanDir":          (reflect.Type).ChanDir,
	"(reflect.Type).Comparable":       (reflect.Type).Comparable,
	"(reflect.Type).ConvertibleTo":    (reflect.Type).ConvertibleTo,
	"(reflect.Type).Elem":             (reflect.Type).Elem,
	"(reflect.Type).Field":            (reflect.Type).Field,
	"(reflect.Type).FieldAlign":       (reflect.Type).FieldAlign,
	"(reflect.Type).FieldByIndex":     (reflect.Type).FieldByIndex,
	"(reflect.Type).FieldByName":      (reflect.Type).FieldByName,
	"(reflect.Type).FieldByNameFunc":  (reflect.Type).FieldByNameFunc,
	"(reflect.Type).Implements":       (reflect.Type).Implements,
	"(reflect.Type).In":               (reflect.Type).In,
	"(reflect.Type).IsVariadic":       (reflect.Type).IsVariadic,
	"(reflect.Type).Key":              (reflect.Type).Key,
	"(reflect.Type).Kind":             (reflect.Type).Kind,
	"(reflect.Type).Len":              (reflect.Type).Len,
	"(reflect.Type).Method":           (reflect.Type).Method,
	"(reflect.Type).MethodByName":     (reflect.Type).MethodByName,
	"(reflect.Type).Name":             (reflect.Type).Name,
	"(reflect.Type).NumField":         (reflect.Type).NumField,
	"(reflect.Type).NumIn":            (reflect.Type).NumIn,
	"(reflect.Type).NumMethod":        (reflect.Type).NumMethod,
	"(reflect.Type).NumOut":           (reflect.Type).NumOut,
	"(reflect.Type).Out":              (reflect.Type).Out,
	"(reflect.Type).PkgPath":          (reflect.Type).PkgPath,
	"(reflect.Type).Size":             (reflect.Type).Size,
	"(reflect.Type).String":           (reflect.Type).String,
	"(reflect.Value).Addr":            (reflect.Value).Addr,
	"(reflect.Value).Bool":            (reflect.Value).Bool,
	"(reflect.Value).Bytes":           (reflect.Value).Bytes,
	"(reflect.Value).Call":            (reflect.Value).Call,
	"(reflect.Value).CallSlice":       (reflect.Value).CallSlice,
	"(reflect.Value).CanAddr":         (reflect.Value).CanAddr,
	"(reflect.Value).CanInterface":    (reflect.Value).CanInterface,
	"(reflect.Value).CanSet":          (reflect.Value).CanSet,
	"(reflect.Value).Cap":             (reflect.Value).Cap,
	"(reflect.Value).Close":           (reflect.Value).Close,
	"(reflect.Value).Complex":         (reflect.Value).Complex,
	"(reflect.Value).Convert":         (reflect.Value).Convert,
	"(reflect.Value).Elem":            (reflect.Value).Elem,
	"(reflect.Value).Field":           (reflect.Value).Field,
	"(reflect.Value).FieldByIndex":    (reflect.Value).FieldByIndex,
	"(reflect.Value).FieldByName":     (reflect.Value).FieldByName,
	"(reflect.Value).FieldByNameFunc": (reflect.Value).FieldByNameFunc,
	"(reflect.Value).Float":           (reflect.Value).Float,
	"(reflect.Value).Index":           (reflect.Value).Index,
	"(reflect.Value).Int":             (reflect.Value).Int,
	"(reflect.Value).Interface":       (reflect.Value).Interface,
	"(reflect.Value).InterfaceData":   (reflect.Value).InterfaceData,
	"(reflect.Value).IsNil":           (reflect.Value).IsNil,
	"(reflect.Value).IsValid":         (reflect.Value).IsValid,
	"(reflect.Value).IsZero":          (reflect.Value).IsZero,
	"(reflect.Value).Kind":            (reflect.Value).Kind,
	"(reflect.Value).Len":             (reflect.Value).Len,
	"(reflect.Value).MapIndex":        (reflect.Value).MapIndex,
	"(reflect.Value).MapKeys":         (reflect.Value).MapKeys,
	"(reflect.Value).MapRange":        (reflect.Value).MapRange,
	"(reflect.Value).Method":          (reflect.Value).Method,
	"(reflect.Value).MethodByName":    (reflect.Value).MethodByName,
	"(reflect.Value).NumField":        (reflect.Value).NumField,
	"(reflect.Value).NumMethod":       (reflect.Value).NumMethod,
	"(reflect.Value).OverflowComplex": (reflect.Value).OverflowComplex,
	"(reflect.Value).OverflowFloat":   (reflect.Value).OverflowFloat,
	"(reflect.Value).OverflowInt":     (reflect.Value).OverflowInt,
	"(reflect.Value).OverflowUint":    (reflect.Value).OverflowUint,
	"(reflect.Value).Pointer":         (reflect.Value).Pointer,
	"(reflect.Value).Recv":            (reflect.Value).Recv,
	"(reflect.Value).Send":            (reflect.Value).Send,
	"(reflect.Value).Set":             (reflect.Value).Set,
	"(reflect.Value).SetBool":         (reflect.Value).SetBool,
	"(reflect.Value).SetBytes":        (reflect.Value).SetBytes,
	"(reflect.Value).SetCap":          (reflect.Value).SetCap,
	"(reflect.Value).SetComplex":      (reflect.Value).SetComplex,
	"(reflect.Value).SetFloat":        (reflect.Value).SetFloat,
	"(reflect.Value).SetInt":          (reflect.Value).SetInt,
	"(reflect.Value).SetLen":          (reflect.Value).SetLen,
	"(reflect.Value).SetMapIndex":     (reflect.Value).SetMapIndex,
	"(reflect.Value).SetPointer":      (reflect.Value).SetPointer,
	"(reflect.Value).SetString":       (reflect.Value).SetString,
	"(reflect.Value).SetUint":         (reflect.Value).SetUint,
	"(reflect.Value).Slice":           (reflect.Value).Slice,
	"(reflect.Value).Slice3":          (reflect.Value).Slice3,
	"(reflect.Value).String":          (reflect.Value).String,
	"(reflect.Value).TryRecv":         (reflect.Value).TryRecv,
	"(reflect.Value).TrySend":         (reflect.Value).TrySend,
	"(reflect.Value).Type":            (reflect.Value).Type,
	"(reflect.Value).Uint":            (reflect.Value).Uint,
	"(reflect.Value).UnsafeAddr":      (reflect.Value).UnsafeAddr,
	"reflect.Append":                  reflect.Append,
	"reflect.AppendSlice":             reflect.AppendSlice,
	"reflect.ArrayOf":                 reflect.ArrayOf,
	"reflect.ChanOf":                  reflect.ChanOf,
	"reflect.Copy":                    reflect.Copy,
	"reflect.DeepEqual":               reflect.DeepEqual,
	"reflect.FuncOf":                  reflect.FuncOf,
	"reflect.Indirect":                reflect.Indirect,
	"reflect.MakeChan":                reflect.MakeChan,
	"reflect.MakeFunc":                reflect.MakeFunc,
	"reflect.MakeMap":                 reflect.MakeMap,
	"reflect.MakeMapWithSize":         reflect.MakeMapWithSize,
	"reflect.MakeSlice":               reflect.MakeSlice,
	"reflect.MapOf":                   reflect.MapOf,
	"reflect.New":                     reflect.New,
	"reflect.NewAt":                   reflect.NewAt,
	"reflect.PtrTo":                   reflect.PtrTo,
	"reflect.Select":                  reflect.Select,
	"reflect.SliceOf":                 reflect.SliceOf,
	"reflect.StructOf":                reflect.StructOf,
	"reflect.Swapper":                 reflect.Swapper,
	"reflect.TypeOf":                  reflect.TypeOf,
	"reflect.ValueOf":                 reflect.ValueOf,
	"reflect.Zero":                    reflect.Zero,
}

var typList = []interface{}{
	(*reflect.ChanDir)(nil),
	(*reflect.Kind)(nil),
	(*reflect.MapIter)(nil),
	(*reflect.Method)(nil),
	(*reflect.SelectCase)(nil),
	(*reflect.SelectDir)(nil),
	(*reflect.SliceHeader)(nil),
	(*reflect.StringHeader)(nil),
	(*reflect.StructField)(nil),
	(*reflect.StructTag)(nil),
	(*reflect.Type)(nil),
	(*reflect.Value)(nil),
	(*reflect.ValueError)(nil),
}
