// export by github.com/goplus/gossa/cmd/qexp

package parse

import (
	"text/template/parse"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage("text/template/parse", extMap, typList)
}

var extMap = map[string]interface{}{
	"(*text/template/parse.ActionNode).Copy":        (*parse.ActionNode).Copy,
	"(*text/template/parse.ActionNode).String":      (*parse.ActionNode).String,
	"(*text/template/parse.BoolNode).Copy":          (*parse.BoolNode).Copy,
	"(*text/template/parse.BoolNode).String":        (*parse.BoolNode).String,
	"(*text/template/parse.BranchNode).Copy":        (*parse.BranchNode).Copy,
	"(*text/template/parse.BranchNode).String":      (*parse.BranchNode).String,
	"(*text/template/parse.ChainNode).Add":          (*parse.ChainNode).Add,
	"(*text/template/parse.ChainNode).Copy":         (*parse.ChainNode).Copy,
	"(*text/template/parse.ChainNode).String":       (*parse.ChainNode).String,
	"(*text/template/parse.CommandNode).Copy":       (*parse.CommandNode).Copy,
	"(*text/template/parse.CommandNode).String":     (*parse.CommandNode).String,
	"(*text/template/parse.DotNode).Copy":           (*parse.DotNode).Copy,
	"(*text/template/parse.DotNode).String":         (*parse.DotNode).String,
	"(*text/template/parse.DotNode).Type":           (*parse.DotNode).Type,
	"(*text/template/parse.FieldNode).Copy":         (*parse.FieldNode).Copy,
	"(*text/template/parse.FieldNode).String":       (*parse.FieldNode).String,
	"(*text/template/parse.IdentifierNode).Copy":    (*parse.IdentifierNode).Copy,
	"(*text/template/parse.IdentifierNode).SetPos":  (*parse.IdentifierNode).SetPos,
	"(*text/template/parse.IdentifierNode).SetTree": (*parse.IdentifierNode).SetTree,
	"(*text/template/parse.IdentifierNode).String":  (*parse.IdentifierNode).String,
	"(*text/template/parse.IfNode).Copy":            (*parse.IfNode).Copy,
	"(*text/template/parse.IfNode).String":          (*parse.IfNode).String,
	"(*text/template/parse.ListNode).Copy":          (*parse.ListNode).Copy,
	"(*text/template/parse.ListNode).CopyList":      (*parse.ListNode).CopyList,
	"(*text/template/parse.ListNode).String":        (*parse.ListNode).String,
	"(*text/template/parse.NilNode).Copy":           (*parse.NilNode).Copy,
	"(*text/template/parse.NilNode).String":         (*parse.NilNode).String,
	"(*text/template/parse.NilNode).Type":           (*parse.NilNode).Type,
	"(*text/template/parse.NumberNode).Copy":        (*parse.NumberNode).Copy,
	"(*text/template/parse.NumberNode).String":      (*parse.NumberNode).String,
	"(*text/template/parse.PipeNode).Copy":          (*parse.PipeNode).Copy,
	"(*text/template/parse.PipeNode).CopyPipe":      (*parse.PipeNode).CopyPipe,
	"(*text/template/parse.PipeNode).String":        (*parse.PipeNode).String,
	"(*text/template/parse.RangeNode).Copy":         (*parse.RangeNode).Copy,
	"(*text/template/parse.RangeNode).String":       (*parse.RangeNode).String,
	"(*text/template/parse.StringNode).Copy":        (*parse.StringNode).Copy,
	"(*text/template/parse.StringNode).String":      (*parse.StringNode).String,
	"(*text/template/parse.TemplateNode).Copy":      (*parse.TemplateNode).Copy,
	"(*text/template/parse.TemplateNode).String":    (*parse.TemplateNode).String,
	"(*text/template/parse.TextNode).Copy":          (*parse.TextNode).Copy,
	"(*text/template/parse.TextNode).String":        (*parse.TextNode).String,
	"(*text/template/parse.Tree).Copy":              (*parse.Tree).Copy,
	"(*text/template/parse.Tree).ErrorContext":      (*parse.Tree).ErrorContext,
	"(*text/template/parse.Tree).Parse":             (*parse.Tree).Parse,
	"(*text/template/parse.VariableNode).Copy":      (*parse.VariableNode).Copy,
	"(*text/template/parse.VariableNode).String":    (*parse.VariableNode).String,
	"(*text/template/parse.WithNode).Copy":          (*parse.WithNode).Copy,
	"(*text/template/parse.WithNode).String":        (*parse.WithNode).String,
	"(text/template/parse.ActionNode).Position":     (parse.ActionNode).Position,
	"(text/template/parse.ActionNode).Type":         (parse.ActionNode).Type,
	"(text/template/parse.BoolNode).Position":       (parse.BoolNode).Position,
	"(text/template/parse.BoolNode).Type":           (parse.BoolNode).Type,
	"(text/template/parse.BranchNode).Position":     (parse.BranchNode).Position,
	"(text/template/parse.BranchNode).Type":         (parse.BranchNode).Type,
	"(text/template/parse.ChainNode).Position":      (parse.ChainNode).Position,
	"(text/template/parse.ChainNode).Type":          (parse.ChainNode).Type,
	"(text/template/parse.CommandNode).Position":    (parse.CommandNode).Position,
	"(text/template/parse.CommandNode).Type":        (parse.CommandNode).Type,
	"(text/template/parse.DotNode).Position":        (parse.DotNode).Position,
	"(text/template/parse.FieldNode).Position":      (parse.FieldNode).Position,
	"(text/template/parse.FieldNode).Type":          (parse.FieldNode).Type,
	"(text/template/parse.IdentifierNode).Position": (parse.IdentifierNode).Position,
	"(text/template/parse.IdentifierNode).Type":     (parse.IdentifierNode).Type,
	"(text/template/parse.IfNode).Position":         (parse.IfNode).Position,
	"(text/template/parse.IfNode).Type":             (parse.IfNode).Type,
	"(text/template/parse.ListNode).Position":       (parse.ListNode).Position,
	"(text/template/parse.ListNode).Type":           (parse.ListNode).Type,
	"(text/template/parse.NilNode).Position":        (parse.NilNode).Position,
	"(text/template/parse.Node).Copy":               (parse.Node).Copy,
	"(text/template/parse.Node).Position":           (parse.Node).Position,
	"(text/template/parse.Node).String":             (parse.Node).String,
	"(text/template/parse.Node).Type":               (parse.Node).Type,
	"(text/template/parse.NodeType).Type":           (parse.NodeType).Type,
	"(text/template/parse.NumberNode).Position":     (parse.NumberNode).Position,
	"(text/template/parse.NumberNode).Type":         (parse.NumberNode).Type,
	"(text/template/parse.PipeNode).Position":       (parse.PipeNode).Position,
	"(text/template/parse.PipeNode).Type":           (parse.PipeNode).Type,
	"(text/template/parse.Pos).Position":            (parse.Pos).Position,
	"(text/template/parse.RangeNode).Position":      (parse.RangeNode).Position,
	"(text/template/parse.RangeNode).Type":          (parse.RangeNode).Type,
	"(text/template/parse.StringNode).Position":     (parse.StringNode).Position,
	"(text/template/parse.StringNode).Type":         (parse.StringNode).Type,
	"(text/template/parse.TemplateNode).Position":   (parse.TemplateNode).Position,
	"(text/template/parse.TemplateNode).Type":       (parse.TemplateNode).Type,
	"(text/template/parse.TextNode).Position":       (parse.TextNode).Position,
	"(text/template/parse.TextNode).Type":           (parse.TextNode).Type,
	"(text/template/parse.VariableNode).Position":   (parse.VariableNode).Position,
	"(text/template/parse.VariableNode).Type":       (parse.VariableNode).Type,
	"(text/template/parse.WithNode).Position":       (parse.WithNode).Position,
	"(text/template/parse.WithNode).Type":           (parse.WithNode).Type,
	"text/template/parse.IsEmptyTree":               parse.IsEmptyTree,
	"text/template/parse.New":                       parse.New,
	"text/template/parse.NewIdentifier":             parse.NewIdentifier,
	"text/template/parse.Parse":                     parse.Parse,
}

var typList = []interface{}{
	(*parse.ActionNode)(nil),
	(*parse.BoolNode)(nil),
	(*parse.BranchNode)(nil),
	(*parse.ChainNode)(nil),
	(*parse.CommandNode)(nil),
	(*parse.DotNode)(nil),
	(*parse.FieldNode)(nil),
	(*parse.IdentifierNode)(nil),
	(*parse.IfNode)(nil),
	(*parse.ListNode)(nil),
	(*parse.NilNode)(nil),
	(*parse.Node)(nil),
	(*parse.NodeType)(nil),
	(*parse.NumberNode)(nil),
	(*parse.PipeNode)(nil),
	(*parse.Pos)(nil),
	(*parse.RangeNode)(nil),
	(*parse.StringNode)(nil),
	(*parse.TemplateNode)(nil),
	(*parse.TextNode)(nil),
	(*parse.Tree)(nil),
	(*parse.VariableNode)(nil),
	(*parse.WithNode)(nil),
}
