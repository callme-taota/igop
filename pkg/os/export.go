// export by github.com/goplus/gossa/cmd/qexp

package os

import (
	q "os"

	"go/constant"
	"reflect"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage(&gossa.Package{
		Name: "os",
		Path: "os",
		Deps: map[string]string{
			"errors":                   "errors",
			"internal/oserror":         "oserror",
			"internal/poll":            "poll",
			"internal/syscall/execenv": "execenv",
			"internal/syscall/unix":    "unix",
			"internal/testlog":         "testlog",
			"io":                       "io",
			"io/fs":                    "fs",
			"runtime":                  "runtime",
			"sort":                     "sort",
			"sync":                     "sync",
			"sync/atomic":              "atomic",
			"syscall":                  "syscall",
			"time":                     "time",
			"unsafe":                   "unsafe",
		},
		Interfaces: map[string]reflect.Type{
			"Signal": reflect.TypeOf((*q.Signal)(nil)).Elem(),
		},
		NamedTypes: map[string]gossa.NamedType{
			"File":         {reflect.TypeOf((*q.File)(nil)).Elem(), "", "Chdir,Chmod,Chown,Close,Fd,Name,Read,ReadAt,ReadDir,ReadFrom,Readdir,Readdirnames,Seek,SetDeadline,SetReadDeadline,SetWriteDeadline,Stat,Sync,SyscallConn,Truncate,Write,WriteAt,WriteString,checkValid,chmod,pread,pwrite,read,readFrom,readdir,seek,setDeadline,setReadDeadline,setWriteDeadline,wrapErr,write"},
			"LinkError":    {reflect.TypeOf((*q.LinkError)(nil)).Elem(), "", "Error,Unwrap"},
			"ProcAttr":     {reflect.TypeOf((*q.ProcAttr)(nil)).Elem(), "", ""},
			"Process":      {reflect.TypeOf((*q.Process)(nil)).Elem(), "", "Kill,Release,Signal,Wait,blockUntilWaitable,done,kill,release,setDone,signal,wait"},
			"ProcessState": {reflect.TypeOf((*q.ProcessState)(nil)).Elem(), "", "ExitCode,Exited,Pid,String,Success,Sys,SysUsage,SystemTime,UserTime,exited,success,sys,sysUsage,systemTime,userTime"},
			"SyscallError": {reflect.TypeOf((*q.SyscallError)(nil)).Elem(), "", "Error,Timeout,Unwrap"},
		},
		AliasTypes: map[string]reflect.Type{
			"DirEntry":  reflect.TypeOf((*q.DirEntry)(nil)).Elem(),
			"FileInfo":  reflect.TypeOf((*q.FileInfo)(nil)).Elem(),
			"FileMode":  reflect.TypeOf((*q.FileMode)(nil)).Elem(),
			"PathError": reflect.TypeOf((*q.PathError)(nil)).Elem(),
		},
		Vars: map[string]reflect.Value{
			"Args":                reflect.ValueOf(&q.Args),
			"ErrClosed":           reflect.ValueOf(&q.ErrClosed),
			"ErrDeadlineExceeded": reflect.ValueOf(&q.ErrDeadlineExceeded),
			"ErrExist":            reflect.ValueOf(&q.ErrExist),
			"ErrInvalid":          reflect.ValueOf(&q.ErrInvalid),
			"ErrNoDeadline":       reflect.ValueOf(&q.ErrNoDeadline),
			"ErrNotExist":         reflect.ValueOf(&q.ErrNotExist),
			"ErrPermission":       reflect.ValueOf(&q.ErrPermission),
			"ErrProcessDone":      reflect.ValueOf(&q.ErrProcessDone),
			"Interrupt":           reflect.ValueOf(&q.Interrupt),
			"Kill":                reflect.ValueOf(&q.Kill),
			"Stderr":              reflect.ValueOf(&q.Stderr),
			"Stdin":               reflect.ValueOf(&q.Stdin),
			"Stdout":              reflect.ValueOf(&q.Stdout),
		},
		Funcs: map[string]reflect.Value{
			"Chdir":           reflect.ValueOf(q.Chdir),
			"Chmod":           reflect.ValueOf(q.Chmod),
			"Chown":           reflect.ValueOf(q.Chown),
			"Chtimes":         reflect.ValueOf(q.Chtimes),
			"Clearenv":        reflect.ValueOf(q.Clearenv),
			"Create":          reflect.ValueOf(q.Create),
			"CreateTemp":      reflect.ValueOf(q.CreateTemp),
			"DirFS":           reflect.ValueOf(q.DirFS),
			"Environ":         reflect.ValueOf(q.Environ),
			"Executable":      reflect.ValueOf(q.Executable),
			"Exit":            reflect.ValueOf(q.Exit),
			"Expand":          reflect.ValueOf(q.Expand),
			"ExpandEnv":       reflect.ValueOf(q.ExpandEnv),
			"FindProcess":     reflect.ValueOf(q.FindProcess),
			"Getegid":         reflect.ValueOf(q.Getegid),
			"Getenv":          reflect.ValueOf(q.Getenv),
			"Geteuid":         reflect.ValueOf(q.Geteuid),
			"Getgid":          reflect.ValueOf(q.Getgid),
			"Getgroups":       reflect.ValueOf(q.Getgroups),
			"Getpagesize":     reflect.ValueOf(q.Getpagesize),
			"Getpid":          reflect.ValueOf(q.Getpid),
			"Getppid":         reflect.ValueOf(q.Getppid),
			"Getuid":          reflect.ValueOf(q.Getuid),
			"Getwd":           reflect.ValueOf(q.Getwd),
			"Hostname":        reflect.ValueOf(q.Hostname),
			"IsExist":         reflect.ValueOf(q.IsExist),
			"IsNotExist":      reflect.ValueOf(q.IsNotExist),
			"IsPathSeparator": reflect.ValueOf(q.IsPathSeparator),
			"IsPermission":    reflect.ValueOf(q.IsPermission),
			"IsTimeout":       reflect.ValueOf(q.IsTimeout),
			"Lchown":          reflect.ValueOf(q.Lchown),
			"Link":            reflect.ValueOf(q.Link),
			"LookupEnv":       reflect.ValueOf(q.LookupEnv),
			"Lstat":           reflect.ValueOf(q.Lstat),
			"Mkdir":           reflect.ValueOf(q.Mkdir),
			"MkdirAll":        reflect.ValueOf(q.MkdirAll),
			"MkdirTemp":       reflect.ValueOf(q.MkdirTemp),
			"NewFile":         reflect.ValueOf(q.NewFile),
			"NewSyscallError": reflect.ValueOf(q.NewSyscallError),
			"Open":            reflect.ValueOf(q.Open),
			"OpenFile":        reflect.ValueOf(q.OpenFile),
			"Pipe":            reflect.ValueOf(q.Pipe),
			"ReadDir":         reflect.ValueOf(q.ReadDir),
			"ReadFile":        reflect.ValueOf(q.ReadFile),
			"Readlink":        reflect.ValueOf(q.Readlink),
			"Remove":          reflect.ValueOf(q.Remove),
			"RemoveAll":       reflect.ValueOf(q.RemoveAll),
			"Rename":          reflect.ValueOf(q.Rename),
			"SameFile":        reflect.ValueOf(q.SameFile),
			"Setenv":          reflect.ValueOf(q.Setenv),
			"StartProcess":    reflect.ValueOf(q.StartProcess),
			"Stat":            reflect.ValueOf(q.Stat),
			"Symlink":         reflect.ValueOf(q.Symlink),
			"TempDir":         reflect.ValueOf(q.TempDir),
			"Truncate":        reflect.ValueOf(q.Truncate),
			"Unsetenv":        reflect.ValueOf(q.Unsetenv),
			"UserCacheDir":    reflect.ValueOf(q.UserCacheDir),
			"UserConfigDir":   reflect.ValueOf(q.UserConfigDir),
			"UserHomeDir":     reflect.ValueOf(q.UserHomeDir),
			"WriteFile":       reflect.ValueOf(q.WriteFile),
		},
		TypedConsts: map[string]gossa.TypedConst{
			"ModeAppend":     {reflect.TypeOf(q.ModeAppend), constant.MakeInt64(1073741824)},
			"ModeCharDevice": {reflect.TypeOf(q.ModeCharDevice), constant.MakeInt64(2097152)},
			"ModeDevice":     {reflect.TypeOf(q.ModeDevice), constant.MakeInt64(67108864)},
			"ModeDir":        {reflect.TypeOf(q.ModeDir), constant.MakeInt64(2147483648)},
			"ModeExclusive":  {reflect.TypeOf(q.ModeExclusive), constant.MakeInt64(536870912)},
			"ModeIrregular":  {reflect.TypeOf(q.ModeIrregular), constant.MakeInt64(524288)},
			"ModeNamedPipe":  {reflect.TypeOf(q.ModeNamedPipe), constant.MakeInt64(33554432)},
			"ModePerm":       {reflect.TypeOf(q.ModePerm), constant.MakeInt64(511)},
			"ModeSetgid":     {reflect.TypeOf(q.ModeSetgid), constant.MakeInt64(4194304)},
			"ModeSetuid":     {reflect.TypeOf(q.ModeSetuid), constant.MakeInt64(8388608)},
			"ModeSocket":     {reflect.TypeOf(q.ModeSocket), constant.MakeInt64(16777216)},
			"ModeSticky":     {reflect.TypeOf(q.ModeSticky), constant.MakeInt64(1048576)},
			"ModeSymlink":    {reflect.TypeOf(q.ModeSymlink), constant.MakeInt64(134217728)},
			"ModeTemporary":  {reflect.TypeOf(q.ModeTemporary), constant.MakeInt64(268435456)},
			"ModeType":       {reflect.TypeOf(q.ModeType), constant.MakeInt64(2401763328)},
			"O_APPEND":       {reflect.TypeOf(q.O_APPEND), constant.MakeInt64(8)},
			"O_CREATE":       {reflect.TypeOf(q.O_CREATE), constant.MakeInt64(512)},
			"O_EXCL":         {reflect.TypeOf(q.O_EXCL), constant.MakeInt64(2048)},
			"O_RDONLY":       {reflect.TypeOf(q.O_RDONLY), constant.MakeInt64(0)},
			"O_RDWR":         {reflect.TypeOf(q.O_RDWR), constant.MakeInt64(2)},
			"O_SYNC":         {reflect.TypeOf(q.O_SYNC), constant.MakeInt64(128)},
			"O_TRUNC":        {reflect.TypeOf(q.O_TRUNC), constant.MakeInt64(1024)},
			"O_WRONLY":       {reflect.TypeOf(q.O_WRONLY), constant.MakeInt64(1)},
			"SEEK_CUR":       {reflect.TypeOf(q.SEEK_CUR), constant.MakeInt64(1)},
			"SEEK_END":       {reflect.TypeOf(q.SEEK_END), constant.MakeInt64(2)},
			"SEEK_SET":       {reflect.TypeOf(q.SEEK_SET), constant.MakeInt64(0)},
		},
		UntypedConsts: map[string]gossa.UntypedConst{
			"DevNull":           {"untyped string", constant.MakeString("/dev/null")},
			"PathListSeparator": {"untyped rune", constant.MakeInt64(58)},
			"PathSeparator":     {"untyped rune", constant.MakeInt64(47)},
		},
	})
}
